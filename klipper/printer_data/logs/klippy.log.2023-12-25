=============== Log rollover at Mon Dec 25 03:39:03 2023 ===============
Starting Klippy...
Args: ['/home/meligy/klipper/klippy/klippy.py', '/home/meligy/printer_data/config/printer.cfg', '-l', '/home/meligy/printer_data/logs/klippy.log', '-I', '/home/meligy/printer_data/comms/klippy.serial', '-a', '/home/meligy/printer_data/comms/klippy.sock']
Git version: 'v0.12.0-35-g2defd737-dirty'
Untracked files: klippy/extras/led_effect.py
Branch: master
Remote: origin
Tracked URL: https://github.com/Klipper3d/klipper.git
CPU: 4 core ?
Python: '3.9.2 (default, Mar 12 2021, 04:06:34) \n[GCC 10.2.1 20210110]'
Start printer at Mon Dec 25 03:39:04 2023 (1703475544.9 25.3)
===== Config file =====
[respond]

[gcode_macro _OBICO_LAYER_CHANGE]
description = Run a scan across the current print area
variable_current_layer = -1
variable_first_layer_scan_enabled = True
variable_first_layer_scan_stepover = 10
variable_first_layer_scan_feedrate = 600
variable_first_layer_scan_zhop = 4
variable_first_layer_scan_retract = 6.5
variable_first_layer_scanning = False
gcode = 
	SET_GCODE_VARIABLE MACRO=_OBICO_LAYER_CHANGE VARIABLE=current_layer VALUE={params.CURRENT_LAYER|int}
	{% if first_layer_scan_enabled and params.CURRENT_LAYER|int == 2 %}
	SAVE_GCODE_STATE NAME=current_print_state
	{% set current_x = printer.toolhead.position.x %}
	{% set current_y = printer.toolhead.position.y %}
	
	{% if first_layer_scan_retract > 0 and printer[printer.toolhead.extruder].can_extrude %}
	M83
	G0 E-{first_layer_scan_retract} F900
	{% endif %}
	
	SET_GCODE_VARIABLE MACRO=_OBICO_LAYER_CHANGE VARIABLE=first_layer_scanning VALUE=True
	G91
	G0 Z{first_layer_scan_zhop} F1000
	G90
	{% if 'MINX' in params and 'MAXX' in params and 'MINY' in params and 'MAXY' in params %}
	{% set stepoverCount = ((params.MAXY|float - params.MINY|float) / first_layer_scan_stepover) | round(method='ceil') | int %}
	G0 X{params.MINX} Y{params.MINY} F{first_layer_scan_feedrate}
	{% for ystep in range(stepoverCount) %}
	G0 Y{params.MINY|float + first_layer_scan_stepover * ystep}
	{% if ystep % 2 == 0 %}
	G0 X{params.MAXX} F{first_layer_scan_feedrate}
	{% else %}
	G0 X{params.MINX} F{first_layer_scan_feedrate}
	{% endif %}
	{% endfor %}
	{% endif %}
	
	G0 X{current_x} Y{current_y} F{first_layer_scan_feedrate}
	G91
	G0 Z-{first_layer_scan_zhop} F1000
	
	{% if first_layer_scan_retract > 0 and printer[printer.toolhead.extruder].can_extrude %}
	G0 E{first_layer_scan_retract} F900
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=current_print_state
	SET_GCODE_VARIABLE MACRO=_OBICO_LAYER_CHANGE VARIABLE=first_layer_scanning VALUE=False
	{% endif %}

[virtual_sdcard]
path = ~/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[pause_resume]

[display_status]

[gcode_macro START_PRINT]
gcode = 
	STOP_LED_EFFECTS
	SET_LED_EFFECT EFFECT=bed_effects_1
	SET_LED_EFFECT EFFECT=bed_effects_2
	{% set BED_TEMP = params.BED_TEMP|default(60)|float %}
	{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
	
	
	M140 S{BED_TEMP}
	
	G90
	
	SET_GCODE_OFFSET Z=0.0
	
	G28
	
	G1 Z5 F3000
	
	G1 Z0.15 F300
	
	M190 S{BED_TEMP}
	
	SET_LED_EFFECT EFFECT=abl_led FADETIME=1.0 REPLACE=1
	BED_MESH_CALIBRATE
	
	SMART_PARK
	SET_LED_EFFECT EFFECT=extruder_heater_led_1 FADETIME=1.0 REPLACE=1
	SET_LED_EFFECT EFFECT=extruder_heater_led_2
	M109 S{EXTRUDER_TEMP}
	SET_LED_EFFECT EFFECT=printing FADETIME=10.0 REPLACE=1
	LINE_PURGE

[gcode_macro END_PRINT]
gcode = 
	STOP_LED_EFFECTS
	SET_LED LED=neo red=0 green=0 blue=0
	
	M140 S0
	M104 S0
	M106 S0
	
	G91
	G1 X-2 Y-2 E-3 F300
	
	G1 Z10 F3000
	G90
	
	M84

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = CANCEL_PRINT_BASE
gcode = 
	SET_LED_EFFECT EFFECT=cancel_print_led FADETIME=1.0 REPLACE=1
	
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set allow_park = client.park_at_cancel|default(false)|lower == 'true' %}
	{% set retract = client.cancel_retract|default(5.0)|abs %}
	
	{% set park_x = "" if (client.park_at_cancel_x|default(none) is none)
	else "X=" ~ client.park_at_cancel_x %}
	{% set park_y = "" if (client.park_at_cancel_y|default(none) is none)
	else "Y=" ~ client.park_at_cancel_y %}
	{% set custom_park = park_x|length > 0 or park_y|length > 0 %}
	
	
	{% if printer['gcode_macro PAUSE'].restore_idle_timeout > 0 %}
	SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro PAUSE'].restore_idle_timeout}
	{% endif %}
	{% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
	_CLIENT_RETRACT LENGTH={retract}
	TURN_OFF_HEATERS
	M106 S0
	
	SET_PAUSE_NEXT_LAYER ENABLE=0
	SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
	CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
variable_restore_idle_timeout = 0
gcode = 
	STOP_LED_EFFECTS
	SET_LED_EFFECT EFFECT=pause_print_led FADETIME=1.0 REPLACE=1
	
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set idle_timeout = client.idle_timeout|default(0) %}
	{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != '' else 0%}
	{% set restore = False if printer.toolhead.extruder == ''
	else True  if params.RESTORE|default(1)|int == 1 else False %}
	
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{'restore': restore, 'temp': temp}}"
	
	{% if idle_timeout > 0 %}
	SET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
	SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
	{% endif %}
	PAUSE_BASE
	_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
variable_last_extruder_temp = {'restore': False, 'temp': 0}
gcode = 
	STOP_LED_EFFECTS
	SET_LED_EFFECT EFFECT=printing FADETIME=10.0 REPLACE=1
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set sp_move = client.speed_move|default(velocity) %}
	
	
	{% if printer['gcode_macro PAUSE'].restore_idle_timeout > 0 %}
	SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro PAUSE'].restore_idle_timeout}
	{% endif %}
	{% if printer.idle_timeout.state|upper == "IDLE" %}
	{% if last_extruder_temp.restore %} M109 S{last_extruder_temp.temp} {% endif %}
	{% endif %}
	_CLIENT_EXTRUDE
	RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}

[gcode_macro RESUME_FROM_LOAD]
gcode = 
	G1 E500 F3000
	RESUME

[gcode_macro FILAMENT_LOAD]
gcode = 
	SET_LED_EFFECT EFFECT=filament_loading_led FADETIME=1.0 REPLACE=1
	
	G1 E100 F350
	G28
	
	G1 Z50 F3000
	SET_LED_EFFECT EFFECT=extruder_heater_led_1 FADETIME=1.0 REPLACE=1
	SET_LED_EFFECT EFFECT=extruder_heater_led_2
	
	M109 S230
	STOP_LED_EFFECTS
	SET_LED_EFFECT EFFECT=filament_loading_led FADETIME=1.0 REPLACE=1
	M83
	G92 E0.0
	G1 E500 F350
	M400
	G92 E0.0
	M82
	M104 S0
	M106 S0
	
	M84
	STOP_LED_EFFECTS
	SET_LED LED=neo red=0.7 green=0.7 blue=1

[gcode_macro FILAMENT_UNLOAD]
gcode = 
	SET_LED_EFFECT EFFECT=filament_unloading_led FADETIME=1.0 REPLACE=1
	
	SET_LED_EFFECT EFFECT=extruder_heater_led_1 FADETIME=1.0 REPLACE=1
	SET_LED_EFFECT EFFECT=extruder_heater_led_2
	M109 S230
	STOP_LED_EFFECTS
	SET_LED_EFFECT EFFECT=filament_unloading_led FADETIME=1.0 REPLACE=1
	M83
	G92 E0.0
	G1 E-650 F350
	G92 E0.0
	M82
	STOP_LED_EFFECTS
	SET_LED LED=neo red=0.7 green=0.7 blue=1

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE|default(1)|int != 0 %}
	{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
	{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
	RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
	{% set custom_park_x  = client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = client.custom_park_y|default(0.0) %}
	{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = client.speed_hop|default(15) * 60 %}
	{% set sp_move        = client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Printer not homed'
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
	{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.toolhead.extruder != '' %}
	{% if printer[printer.toolhead.extruder].can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	RESPOND TYPE=echo MSG='Extruder not hot enough'
	{% endif %}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = _BED_MESH_CALIBRATE
gcode = 
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
	{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}
	{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}
	{% set verbose_enable = kamp_settings.verbose_enable | abs %}
	{% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}
	{% set attach_macro = kamp_settings.attach_macro | string %}
	{% set detach_macro = kamp_settings.detach_macro | string %}
	{% set mesh_margin = kamp_settings.mesh_margin | float %}
	{% set fuzz_amount = kamp_settings.fuzz_amount | float %}
	{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}
	{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}
	{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}
	{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}
	{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}
	{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}
	{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}
	
	{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}
	{% set adapted_x_min = x_min - mesh_margin - (fuzz_range | random / 100.0) %}
	{% set adapted_y_min = y_min - mesh_margin - (fuzz_range | random / 100.0) %}
	{% set adapted_x_max = x_max + mesh_margin + (fuzz_range | random / 100.0) %}
	{% set adapted_y_max = y_max + mesh_margin + (fuzz_range | random / 100.0) %}
	
	{% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}
	{% set adapted_y_min = [adapted_y_min , bed_mesh_min[1]] | max %}
	{% set adapted_x_max = [adapted_x_max , bed_mesh_max[0]] | min %}
	{% set adapted_y_max = [adapted_y_max , bed_mesh_max[1]] | min %}
	
	{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}
	{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}
	
	{% if (([points_x, points_y]|max) > 6) %}
	{% set algorithm = "bicubic" %}
	{% set min_points = 4 %}
	{% else %}
	{% set algorithm = "lagrange" %}
	{% set min_points = 3 %}
	{% endif %}
	
	{% set points_x = [points_x , min_points]|max %}
	{% set points_y = [points_y , min_points]|max %}
	{% set points_x = [points_x , probe_count[0]]|min %}
	{% set points_y = [points_y , probe_count[1]]|min %}
	
	{% if verbose_enable == True %}
	{% if printer.exclude_object.objects != [] %}
	
	{ action_respond_info( "Algorithm: {}.".format(
	(algorithm),
	)) }
	
	{ action_respond_info("Default probe count: {},{}.".format(
	(probe_count[0]),
	(probe_count[1]),
	)) }
	
	{ action_respond_info("Adapted probe count: {},{}.".format(
	(points_x),
	(points_y),
	)) }
	
	{action_respond_info("Default mesh bounds: {}, {}.".format(
	(bed_mesh_min[0],bed_mesh_min[1]),
	(bed_mesh_max[0],bed_mesh_max[1]),
	)) }
	
	{% if mesh_margin > 0 %}
	{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(
	(mesh_margin),
	(mesh_margin),
	)) }
	{% else %}
	{action_respond_info("Mesh margin is 0, margin not increased.")}
	{% endif %}
	
	{% if fuzz_amount > 0 %}
	{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(
	(fuzz_amount),
	)) }
	{% else %}
	{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}
	{% endif %}
	
	{ action_respond_info("Adapted mesh bounds: {}, {}.".format(
	(adapted_x_min, adapted_y_min),
	(adapted_x_max, adapted_y_max),
	)) }
	
	{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}
	
	{% else %}
	
	{action_respond_info("No objects detected! Check your gcode and make sure that EXCLUDE_OBJECT_DEFINE is happening before BED_MESH_CALIBRATE is called. Defaulting to regular meshing.")}
	G4 P5000
	{% endif %}
	
	{% endif %}
	
	{% if probe_dock_enable == True %}
	{attach_macro}
	{% endif %}
	
	_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}
	
	{% if probe_dock_enable == True %}
	{detach_macro}
	{% endif %}

[gcode_macro LINE_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	{% if purge_y_origin > 0 %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_center),
	(purge_y_origin),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% else %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_origin),
	(purge_y_center),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% endif %}
	
	SAVE_GCODE_STATE NAME=Prepurge_State
	
	{% if purge_y_origin > 0 %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_center} Y{purge_y_origin}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 X{purge_x_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% else %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_center}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=Prepurge_State
	
	{% endif %}

[gcode_macro SMART_PARK]
description = Parks your printhead near the print area for pre-print hotend heating.
gcode = 
	
	{% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}
	{% set z_height = kamp_settings.smart_park_height | float %}
	{% set purge_margin = kamp_settings.purge_margin | float %}
	{% set verbose_enable = kamp_settings.verbose_enable | abs %}
	{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}
	{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}
	{% set axis_minimum_x = printer.toolhead.axis_minimum.x | float %}
	{% set axis_minimum_y = printer.toolhead.axis_minimum.y | float %}
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}
	{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	
	{% if purge_margin > 0 and x_min != center_x and y_min != center_y %}
	{% set x_min = [ x_min - purge_margin , x_min ] | min %}
	{% set y_min = [ y_min - purge_margin , y_min ] | min %}
	{% set x_min = [ x_min , axis_minimum_x ] | max %}
	{% set y_min = [ y_min , axis_minimum_y ] | max %}
	{% endif %}
	
	
	{% if verbose_enable == True %}
	
	{ action_respond_info("Smart Park location: {},{}.".format(
	(x_min),
	(y_min),
	)) }
	
	{% endif %}
	
	{% if printer.toolhead.position.z < z_height %}
	G0 Z{z_height}
	{% endif %}
	G0 X{x_min} Y{y_min} F{travel_speed}
	G0 Z{z_height}

[gcode_macro _KAMP_Settings]
description = This macro contains all adjustable settings for KAMP
variable_verbose_enable = True
variable_mesh_margin = 0
variable_fuzz_amount = 1
variable_probe_dock_enable = False
variable_attach_macro = 'Attach_Probe'
variable_detach_macro = 'Dock_Probe'
variable_purge_height = 0.8
variable_tip_distance = 3
variable_purge_margin = 10
variable_purge_amount = 30
variable_flow_rate = 12
variable_smart_park_height = 10
gcode = 
	
	{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

[gcode_macro GET_TIMELAPSE_SETUP]
description = Print the Timelapse setup
gcode = 
	{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}
	{% set output_txt = ["Timelapse Setup:"] %}
	{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}
	{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}
	{% if tl.park.enable %}
	{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}
	{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}
	{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}
	{% endif %}
	{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}
	{% if not tl.extruder.fw_retract %}
	{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}
	{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}
	{% endif %}
	{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}
	{action_respond_info(output_txt|join("\n"))}

[gcode_macro _SET_TIMELAPSE_SETUP]
description = Set user parameters for timelapse
gcode = 
	{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}
	
	{% set min = printer.toolhead.axis_minimum %}
	{% set max = printer.toolhead.axis_maximum %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	{% set park = {'min'   : {'x': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),
	'y': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},
	'max'   : {'x': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),
	'y': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},
	'center': {'x': (max.x-(max.x-min.x)/2)|round(3),
	'y': (max.y-(max.y-min.y)/2)|round(3)}} %}
	
	{% if params.ENABLE %}
	{% if params.ENABLE|lower is in ['true', 'false'] %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == 'true' else False}
	{% else %}
	{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}
	{% endif %}
	{% endif %}
	{% if params.VERBOSE %}
	{% if params.VERBOSE|lower is in ['true', 'false'] %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == 'true' else False}
	{% else %}
	{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}
	{% endif %}
	{% endif %}
	{% if params.CUSTOM_POS_X %}
	{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}
	{% set _dummy = tl.park.custom.update({'x':params.CUSTOM_POS_X|float|round(3)}) %}
	{% else %}
	{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}
	{% endif %}
	{% endif %}
	{% if params.CUSTOM_POS_Y %}
	{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}
	{% set _dummy = tl.park.custom.update({'y':params.CUSTOM_POS_Y|float|round(3)}) %}
	{% else %}
	{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}
	{% endif %}
	{% endif %}
	{% if params.CUSTOM_POS_DZ %}
	{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}
	{% set _dummy = tl.park.custom.update({'dz':params.CUSTOM_POS_DZ|float|round(3)}) %}
	{% else %}
	{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}
	{% endif %}
	{% endif %}
	{% if params.PARK_ENABLE %}
	{% if params.PARK_ENABLE|lower is in ['true', 'false'] %}
	{% set _dummy = tl.park.update({'enable':True if params.PARK_ENABLE|lower == 'true' else False}) %}
	{% else %}
	{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}
	{% endif %}
	{% endif %}
	{% if params.PARK_POS %}
	{% if params.PARK_POS|lower is in ['center','front_left','front_right','back_left','back_right','custom','x_only','y_only'] %}
	{% set dic = {'center'      : {'x': park.center.x   , 'y': park.center.y   , 'dz': 1                },
	'front_left'  : {'x': park.min.x      , 'y': park.min.y      , 'dz': 0                },
	'front_right' : {'x': park.max.x      , 'y': park.min.y      , 'dz': 0                },
	'back_left'   : {'x': park.min.x      , 'y': park.max.y      , 'dz': 0                },
	'back_right'  : {'x': park.max.x      , 'y': park.max.y      , 'dz': 0                },
	'custom'      : {'x': tl.park.custom.x, 'y': tl.park.custom.y, 'dz': tl.park.custom.dz},
	'x_only'      : {'x': tl.park.custom.x, 'y': 'none'          , 'dz': tl.park.custom.dz},
	'y_only'      : {'x': 'none'          , 'y': tl.park.custom.y, 'dz': tl.park.custom.dz}} %}
	{% set _dummy = tl.park.update({'pos':params.PARK_POS|lower}) %}
	{% set _dummy = tl.park.update({'coord':dic[tl.park.pos]}) %}
	{% else %}
	{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"
	% params.PARK_POS|upper)}
	{% endif %}
	{% endif %}
	{% if params.PARK_TIME %}
	{% if params.PARK_TIME|float >= 0.0 %}
	{% set _dummy = tl.park.update({'time':params.PARK_TIME|float|round(3)}) %}
	{% else %}
	{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}
	{% endif %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"
	{% if params.TRAVEL_SPEED %}
	{% if params.TRAVEL_SPEED|float > 0.0 %}
	{% set _dummy = tl.speed.update({'travel':params.TRAVEL_SPEED|float|round(3)}) %}
	{% else %}
	{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}
	{% endif %}
	{% endif %}
	{% if params.RETRACT_SPEED %}
	{% if params.RETRACT_SPEED|float > 0.0 %}
	{% set _dummy = tl.speed.update({'retract':params.RETRACT_SPEED|float|round(3)}) %}
	{% else %}
	{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}
	{% endif %}
	{% endif %}
	{% if params.EXTRUDE_SPEED %}
	{% if params.EXTRUDE_SPEED|float > 0.0 %}
	{% set _dummy = tl.speed.update({'extrude':params.EXTRUDE_SPEED|float|round(3)}) %}
	{% else %}
	{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}
	{% endif %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"
	{% if params.EXTRUDE_DISTANCE %}
	{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}
	{% set _dummy = tl.extruder.update({'extrude':params.EXTRUDE_DISTANCE|float|round(3)}) %}
	{% else %}
	{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}
	{% endif %}
	{% endif %}
	{% if params.RETRACT_DISTANCE %}
	{% if params.RETRACT_DISTANCE|float >= 0.0 %}
	{% set _dummy = tl.extruder.update({'retract':params.RETRACT_DISTANCE|float|round(3)}) %}
	{% else %}
	{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}
	{% endif %}
	{% endif %}
	{% if params.FW_RETRACT %}
	{% if params.FW_RETRACT|lower is in ['true', 'false'] %}
	{% if 'firmware_retraction' in printer.configfile.settings %}
	{% set _dummy = tl.extruder.update({'fw_retract': True if params.FW_RETRACT|lower == 'true' else False}) %}
	{% else %}
	{% set _dummy = tl.extruder.update({'fw_retract':False}) %}
	{% if params.FW_RETRACT|capitalize == 'True' %}
	{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}
	{% endif %}
	{% endif %}
	{% else %}
	{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}
	{% endif %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"
	{% if printer.configfile.settings['gcode_macro pause'] is defined %}
	{% set _dummy = tl.macro.update({'pause': printer.configfile.settings['gcode_macro pause'].rename_existing}) %}
	{% endif %}
	{% if printer.configfile.settings['gcode_macro resume'] is defined %}
	{% set _dummy = tl.macro.update({'resume': printer.configfile.settings['gcode_macro resume'].rename_existing}) %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"

[gcode_macro TIMELAPSE_TAKE_FRAME]
description = Take Timelapse shoot
variable_enable = False
variable_takingframe = False
variable_park = {'enable': False,
	'pos'   : 'center',
	'time'  : 0.1,
	'custom': {'x': 0, 'y': 0, 'dz': 0},
	'coord' : {'x': 0, 'y': 0, 'dz': 0}}
variable_extruder = {'fw_retract': False,
	'retract': 1.0,
	'extrude': 1.0}
variable_speed = {'travel': 100,
	'retract': 15,
	'extrude': 15}
variable_verbose = True
variable_check_time = 0.5
variable_restore = {'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}
variable_macro = {'pause': 'PAUSE', 'resume': 'RESUME'}
variable_is_paused = False
gcode = 
	{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower =='true' else False %}
	{% if enable %}
	{% if (hyperlapse and printer['gcode_macro HYPERLAPSE'].run) or
	(not hyperlapse and not printer['gcode_macro HYPERLAPSE'].run) %}
	{% if park.enable %}
	{% set pos = {'x': 'X' + park.coord.x|string if park.pos != 'y_only' else '',
	'y': 'Y' + park.coord.y|string if park.pos != 'x_only' else '',
	'z': 'Z'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}
	{% set restore = {'absolute': {'coordinates': printer.gcode_move.absolute_coordinates,
	'extrude'    : printer.gcode_move.absolute_extrude},
	'speed'   : printer.gcode_move.speed,
	'e'       : printer.gcode_move.gcode_position.e,
	'factor'  : {'speed'  : printer.gcode_move.speed_factor,
	'extrude': printer.gcode_move.extrude_factor}} %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"
	{% if not printer[printer.toolhead.extruder].can_extrude %}
	{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}
	{% else %}
	{% if extruder.fw_retract %}
	G10
	{% else %}
	M83
	G0 E-{extruder.retract} F{speed.retract * 60}
	{% endif %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True
	{macro.pause}
	SET_GCODE_OFFSET X=0 Y=0
	G90
	{% if "xyz" not in printer.toolhead.homed_axes %}
	{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}
	{% else %}
	G0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True
	UPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}
	M400
	{% endif %}
	_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}
	{% endif %}
	{% else %}
	{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}
	{% endif %}

[gcode_macro _TIMELAPSE_NEW_FRAME]
description = action call for timelapse shoot. must be a seperate macro
gcode = 
	{action_call_remote_method("timelapse_newframe",
	macropark=printer['gcode_macro TIMELAPSE_TAKE_FRAME'].park,
	hyperlapse=params.HYPERLAPSE)}

[delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME]
gcode = 
	{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}
	{% set factor = {'speed': printer.gcode_move.speed_factor, 'extrude': printer.gcode_move.extrude_factor} %}
	{% if tl.takingframe %}
	UPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}
	{% else %}
	{tl.macro.resume} VELOCITY={tl.speed.travel}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False
	{% if not printer[printer.toolhead.extruder].can_extrude %}
	{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}
	{% else %}
	{% if tl.extruder.fw_retract %}
	G11
	{% else %}
	G0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}
	G0 F{tl.restore.speed}
	{% if tl.restore.absolute.extrude %}
	M82
	G92 E{tl.restore.e}
	{% endif %}
	{% endif %}
	{% endif %}
	{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}
	{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}
	{% if not tl.restore.absolute.coordinates %} G91 {% endif %}
	{% endif %}

[gcode_macro HYPERLAPSE]
description = Start/Stop a hyperlapse recording
variable_cycle = 0
variable_run = False
gcode = 
	{% set cycle = params.CYCLE|default(30)|int %}
	{% if params.ACTION and params.ACTION|lower == 'start' %}
	{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}
	SET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True
	SET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}
	UPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}
	TIMELAPSE_TAKE_FRAME HYPERLAPSE=True
	{% elif params.ACTION and params.ACTION|lower == 'stop' %}
	{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}
	SET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False
	UPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0
	{% else %}
	{action_raise_error("Hyperlapse: No valid input parameter
	Use:
	- HYPERLAPSE ACTION=START [CYCLE=time]
	- HYPERLAPSE ACTION=STOP")}
	{% endif %}

[delayed_gcode _HYPERLAPSE_LOOP]
gcode = 
	UPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}
	TIMELAPSE_TAKE_FRAME HYPERLAPSE=True

[gcode_macro TIMELAPSE_RENDER]
description = Render Timelapse video and wait for the result
variable_render = False
variable_run_identifier = 0
gcode = 
	{action_respond_info("Timelapse: Rendering started")}
	{action_call_remote_method("timelapse_render", byrendermacro="True")}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True
	{printer.configfile.settings['gcode_macro pause'].rename_existing}
	UPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5

[delayed_gcode _WAIT_TIMELAPSE_RENDER]
gcode = 
	{% set ri = printer['gcode_macro TIMELAPSE_RENDER'].run_identifier % 4 %}
	SET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}
	{% if printer['gcode_macro TIMELAPSE_RENDER'].render %}
	M117 Rendering {['-','\\','|','/'][ri]}
	UPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5
	{% else %}
	{action_respond_info("Timelapse: Rendering finished")}
	M117
	{printer.configfile.settings['gcode_macro resume'].rename_existing}
	{% endif %}

[gcode_macro TEST_STREAM_DELAY]
description = Helper macro to find stream and park delay
gcode = 
	{% set min = printer.toolhead.axis_minimum %}
	{% set max = printer.toolhead.axis_maximum %}
	{% set act = printer.toolhead.position %}
	{% set tl = printer['gcode_macro TIMELAPSE_TAKE_FRAME'] %}
	{% if act.z > 5.0 %}
	G0 X{min.x + 5.0} F{tl.speed.travel|int * 60}
	G0 X{(max.x-min.x)/2}
	G4 P{tl.park.time|float * 1000}
	_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE
	G0 X{max.x - 5.0}
	{% else %}
	{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}
	{% endif %}

[gcode_macro NEOPIXEL_DISPLAY]
gcode = 
	{% set led = params.LED %}
	{% set type = params.TYPE %}
	{% set mode = params.MODE %}
	{% set my_neopixel = printer.configfile.config['neopixel ' ~ led] %}
	
	{% if mode == 'progress' %}
	{% for i in range(my_neopixel.chain_count|int) %}
	SET_LED_TEMPLATE LED={led} INDEX={i+1} TEMPLATE={'led_' ~ type ~ '_' ~ mode} param_led_num={i+1} param_led_total={my_neopixel.chain_count|int}
	{% endfor %}
	{% endif %}
	{% if mode == 'glow' %}
	SET_LED_TEMPLATE LED={led} TEMPLATE={'led_' ~ type ~ '_' ~ mode}
	{% endif %}

[display_template led_extruder_temp_glow]
text = 
	{% if printer.extruder.target > 0.0 %}
	{%  set temp = printer.extruder.target %}
	{% else %}
	{% set temp = printer.configfile.config.extruder.max_temp %}
	{% endif %}
	{% set ratio = printer.extruder.temperature / temp|float %}
	{ratio}, 0.0, {1-ratio}, 0.0

[display_template led_extruder_temp_progress]
param_led_num = 0
param_led_total = 1
text = 
	{% if printer.extruder.target > 0.0 %}
	{%  set temp = printer.extruder.target %}
	{% else %}
	{% set temp = printer.configfile.config.extruder.max_temp %}
	{% endif %}
	{% set ratio = printer.extruder.temperature / temp|float %}
	{% set led_ratio = param_led_num|float / param_led_total %}
	{% if ratio > led_ratio %}
	{led_ratio}, 0.0, 0.0, 0.0
	{% else %}
	0.0, 0.0, 0.0, 0.0
	{% endif %}

[display_template led_bed_temp_glow]
text = 
	{% if printer.heater_bed.target > 0.0 %}
	{%  set temp = printer.heater_bed.target %}
	{% else %}
	{% set temp = printer.configfile.config.heater_bed.max_temp %}
	{% endif %}
	{% set ratio = printer.heater_bed.temperature / temp|float %}
	{ratio}, 0.0, {1-ratio}, 0.0

[display_template led_bed_temp_progress]
param_led_num = 0
param_led_total = 1
text = 
	{% if printer.heater_bed.target > 0.0 %}
	{%  set temp = printer.heater_bed.target %}
	{% else %}
	{% set temp = printer.configfile.config.heater_bed.max_temp %}
	{% endif %}
	{% set ratio = printer.heater_bed.temperature / temp|float %}
	{% set led_ratio = param_led_num|float / param_led_total %}
	{% if ratio > led_ratio %}
	{led_ratio}, 0.0, 0.0, 0.0
	{% else %}
	0.0, 0.0, 0.0, 0.0
	{% endif %}

[display_template led_print_percent_glow]
text = 
	{% set ratio = printer.virtual_sdcard.progress %}
	0.0, {ratio}, 0.0, 0.0

[display_template led_print_percent_progress]
param_led_num = 0
param_led_total = 1
text = 
	{% set ratio = printer.virtual_sdcard.progress %}
	{% set led_ratio   = param_led_num|float / param_led_total %}
	{% if ratio > led_ratio %}
	0.0, {led_ratio}, 0.0, 0.0
	{% else %}
	0.0, 0.0, 0.0, 0.0
	{% endif %}

[display_template led_printer_speed_glow]
text = 
	{% set ratio  = printer.motion_report.live_velocity|float /  printer.configfile.config.printer.max_velocity|float %}
	0.0, {ratio}, 0.0, 0.0

[display_template led_printer_speed_progress]
param_led_num = 0
param_led_total = 1
text = 
	{% set ratio  = printer.motion_report.live_velocity|float /  printer.configfile.config.printer.max_velocity|float %}
	{% set led_ratio    = param_led_num|float / param_led_total %}
	{% if ratio > led_ratio %}
	0.0, {led_ratio}, 0.0, 0.0
	{% else %}
	0.0, 0.0, 0.0, 0.0
	{% endif %}

[led_effect panel_idle]
autostart = true
frame_rate = 30
leds = 
	neopixel:neo
layers = 
	linearfade 60 0 top (1.0, 0.0, 0.0),(0.0, 1.0, 0.0),(0.0, 0.0, 1.0)

[led_effect bed_effects_1]
leds = 
	neopixel:neo (1-30)
autostart = true
frame_rate = 30
heater = heater_bed
layers = 
	heaterfire 1 0 top (0.0, 0.0, 0.0),(1.0, 0.0, 0.0),(1.0, 1.0, 0.0),(1.0, 1.0, 1.0)

[led_effect bed_effects_2]
leds = 
	neopixel:neo (60-29)
autostart = true
frame_rate = 30
heater = heater_bed
layers = 
	heaterfire 1 0 top (0.0, 0.0, 0.0),(1.0, 0.0, 0.0),(1.0, 1.0, 0.0),(1.0, 1.0, 1.0)

[led_effect extruder_heater_led_1]
leds = 
	neopixel:neo (1-30)
autostart = true
frame_rate = 30
heater = extruder
layers = 
	heaterfire 1 0 top (0.0, 0.0, 0.0),(1.0, 0.0, 0.0),(1.0, 1.0, 0.0),(1.0, 1.0, 1.0)

[led_effect extruder_heater_led_2]
leds = 
	neopixel:neo (60-29)
autostart = true
frame_rate = 30
heater = extruder
layers = 
	heaterfire 1 0 top (0.0, 0.0, 0.0),(1.0, 0.0, 0.0),(1.0, 1.0, 0.0),(1.0, 1.0, 1.0)

[led_effect cancel_print_led]
leds = 
	neopixel:neo
layers = 
	strobe         1  1.5   add        (1.0,  1.0, 1.0)
	breathing      2  0     difference (0.95, 0.0, 0.0)
	static         1  0     top        (1.0,  0.0, 0.0)
autostart = false
frame_rate = 60

[led_effect pause_print_led]
leds = 
	neopixel:neo
layers = 
	strobe         1  1.5   add        (1.0, 1.0, 1.0)
	breathing      2  0     difference (0.95, 0.95, 0.0)
	static         1  0     top        (1.0, 1.0, 0.0)
autostart = false
frame_rate = 60

[led_effect homing_led]
leds = 
	neopixel:neo
layers = 
	homing 1 0 top (0.0, 1.0, 1.0)
autostart = true
frame_rate = 30

[led_effect filament_loading_led]
leds = 
	neopixel:neo
layers = 
	chase 1 1 top (0.8, 1.0, 1.0),(0.0, 0.8, 1.0),(0.0, 0.0, 1.0)
autostart = false
frame_rate = 30

[led_effect filament_unloading_led]
leds = 
	neopixel:neo
layers = 
	chase -1 1 top (0.8, 1.0, 1.0),(0.0, 0.8, 1.0),(0.0, 0.0, 1.0)
autostart = false
frame_rate = 30

[led_effect abl_led]
autostart = false
frame_rate = 30
leds = 
	neopixel:neo
layers = 
	twinkle  10 0.5 lighten (0.8, 1.0, 1.0),(0.0, 0.8, 1.0),(0.0, 0.0, 1.0)
	breathing  10 1 difference (0, 0.7 ,0.7)
	static 1 1 bottom (0.8, 0.7, 0.7)

[led_effect printing]
autostart = false
frame_rate = 30
leds = 
	neopixel:neo
layers = 
	progress 15 15 top (0, 0.7, 1.0), (0.7, 0, 1.0)

[gcode_macro CLEAN_NOZZLE]
variable_start_x = 245
variable_start_y = 0
variable_start_z = 30
variable_wipe_dist_y = 0
variable_wipe_dist_x = -5
variable_wipe_qty = 20
variable_wipe_spd = 50
variable_raise_distance = 18
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}
	
	G90
	
	G1 Z{start_z} F1500
	G1 X{start_x} Y{start_y} F6000
	
	
	{% for wipes in range(1, (wipe_qty + 1)) %}
	
	G1 X{start_x + wipe_dist_x} Y{start_y - wipe_dist_y} F{wipe_spd * 300}
	
	
	
	
	
	G1 X{start_x - wipe_dist_x} Y{start_y + wipe_dist_y} F{wipe_spd * 300}
	
	
	
	
	
	{% endfor %}
	
	
	G1 Z{raise_distance}
	G1 Y 150

[exclude_object]

[temperature_sensor raspberry_pi]
sensor_type = temperature_host
min_temp = 10
max_temp = 100

[temperature_sensor mcu_temp]
sensor_type = temperature_mcu
min_temp = 0
max_temp = 100

[mcu]
serial = /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0
restart_method = command

[mcu host]
serial = /tmp/klipper_host_mcu

[printer]
kinematics = cartesian
max_velocity = 300
max_accel = 2000
max_z_velocity = 5
max_z_accel = 100

[screws_tilt_adjust]
screw1 = 31.5,65
screw1_name = front left screw
screw2 = 201.5,65
screw2_name = front right screw
screw3 = 201.5,230
screw3_name = rear right screw
screw4 = 31.5,230
screw4_name = rear left screw
horizontal_move_z = 10
speed = 200
screw_thread = CW-M4

[stepper_x]
step_pin = PC2
dir_pin = PB9
enable_pin = !PC3
microsteps = 16
rotation_distance = 40
endstop_pin = ^PA5
position_endstop = 0
position_max = 250
homing_speed = 80

[stepper_y]
step_pin = PB8
dir_pin = PB7
enable_pin = !PC3
microsteps = 16
rotation_distance = 40
endstop_pin = ^PA6
position_endstop = 0
position_max = 235
homing_speed = 80

[stepper_z]
step_pin = PB6
dir_pin = !PB5
enable_pin = !PC3
microsteps = 16
rotation_distance = 8
endstop_pin = probe:z_virtual_endstop
position_max = 250
position_min = -10
position_endstop = -3.100

[bltouch]
sensor_pin = ^PB1
control_pin = PB0
x_offset = 0
y_offset = -40
z_offset = 0.700

[safe_z_home]
home_xy_position = 117.5,117.5
speed = 60
z_hop = 10
z_hop_speed = 10

[bed_mesh]
speed = 200
horizontal_move_z = 5
mesh_min = 15,15
mesh_max = 191, 191
probe_count = 6,6
algorithm = bicubic

[extruder]
max_extrude_only_distance = 1000.0
step_pin = PB4
dir_pin = !PB3
enable_pin = !PC3
microsteps = 16
rotation_distance = 7.710843373
nozzle_diameter = 0.400
filament_diameter = 1.750
heater_pin = PA1
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC5
control = pid
pid_kp = 21.527
pid_ki = 1.063
pid_kd = 108.982
min_temp = 0
max_temp = 350
min_extrude_temp = 10
pressure_advance = 0.4
max_extrude_cross_section = 10

[heater_bed]
heater_pin = PA2
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PC4
control = pid
pid_kp = 54.027
pid_ki = 0.770
pid_kd = 948.182
min_temp = 0
max_temp = 130

[fan]
pin = PA0

[filament_switch_sensor RUNOUT]
pause_on_runout = True
runout_gcode = 
	G1 E10 F5000
	G1 E-500 F5000
insert_gcode = 
event_delay = 5.0
pause_delay = 0.5
switch_pin = PA7

[gcode_arcs]

[neopixel neo]
pin = PA13
chain_count = 60
color_order = GRB
initial_red = 0
initial_green = 0
initial_blue = 0

[bed_mesh default]
version = 1
points = 
	0.025000, 0.012500, -0.002500, 0.022500
	-0.072500, -0.055000, -0.057500, -0.020000
	-0.095000, -0.102500, -0.062500, 0.002500
x_count = 4
y_count = 3
mesh_x_pps = 2
mesh_y_pps = 2
algo = lagrange
tension = 0.2
min_x = 73.88
max_x = 146.74
min_y = 80.6
max_y = 139.24
=======================
Extruder max_extrude_ratio=4.157517
mcu 'mcu': Starting serial connect
Loaded MCU 'mcu' 105 commands (v0.11.0-205-g5f0d252b / gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.34-4+rpi1+14) 2.34)
MCU 'mcu' config: ADC_MAX=4095 BUS_PINS_i2c1=PB6,PB7 BUS_PINS_i2c1a=PB8,PB9 BUS_PINS_i2c2=PB10,PB11 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi3=PB4,PB5,PB3 CLOCK_FREQ=72000000 MCU=stm32f103xe PWM_MAX=255 RECEIVE_WINDOW=192 RESERVE_PINS_serial=PA10,PA9 SERIAL_BAUD=250000 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
mcu 'host': Starting connect
Loaded MCU 'host' 118 commands (v0.11.0-299-gb1f597c5 / gcc: (Raspbian 10.2.1-6+rpi1) 10.2.1 20210110 binutils: (GNU Binutils for Raspbian) 2.35.2)
MCU 'host' config: ADC_MAX=4095 CLOCK_FREQ=50000000 MCU=linux PCA9685_MAX=4096 PWM_MAX=32768 STATS_SUMSQ_BASE=256
mcu_temperature 'mcu' nominal base=357.558140 slope=-767.441860
Sending MCU 'mcu' printer configuration...
Configured MCU 'mcu' (1024 moves)
Sending MCU 'host' printer configuration...
Configured MCU 'host' (1024 moves)
webhooks client 4131660920: New connection
webhooks client 4131660920: Client info {'program': 'Moonraker', 'version': 'v0.8.0-209-g4235789'}
bed_mesh: generated points
Index |  Tool Adjusted  |   Probe
  0   | (15.0, 55.0)    | (15.0, 15.0)
  1   | (50.2, 55.0)    | (50.2, 15.0)
  2   | (85.4, 55.0)    | (85.4, 15.0)
  3   | (120.6, 55.0)   | (120.6, 15.0)
  4   | (155.8, 55.0)   | (155.8, 15.0)
  5   | (191.0, 55.0)   | (191.0, 15.0)
  6   | (191.0, 90.2)   | (191.0, 50.2)
  7   | (155.8, 90.2)   | (155.8, 50.2)
  8   | (120.6, 90.2)   | (120.6, 50.2)
  9   | (85.4, 90.2)    | (85.4, 50.2)
  10  | (50.2, 90.2)    | (50.2, 50.2)
  11  | (15.0, 90.2)    | (15.0, 50.2)
  12  | (15.0, 125.4)   | (15.0, 85.4)
  13  | (50.2, 125.4)   | (50.2, 85.4)
  14  | (85.4, 125.4)   | (85.4, 85.4)
  15  | (120.6, 125.4)  | (120.6, 85.4)
  16  | (155.8, 125.4)  | (155.8, 85.4)
  17  | (191.0, 125.4)  | (191.0, 85.4)
  18  | (191.0, 160.6)  | (191.0, 120.6)
  19  | (155.8, 160.6)  | (155.8, 120.6)
  20  | (120.6, 160.6)  | (120.6, 120.6)
  21  | (85.4, 160.6)   | (85.4, 120.6)
  22  | (50.2, 160.6)   | (50.2, 120.6)
  23  | (15.0, 160.6)   | (15.0, 120.6)
  24  | (15.0, 195.8)   | (15.0, 155.8)
  25  | (50.2, 195.8)   | (50.2, 155.8)
  26  | (85.4, 195.8)   | (85.4, 155.8)
  27  | (120.6, 195.8)  | (120.6, 155.8)
  28  | (155.8, 195.8)  | (155.8, 155.8)
  29  | (191.0, 195.8)  | (191.0, 155.8)
  30  | (191.0, 231.0)  | (191.0, 191.0)
  31  | (155.8, 231.0)  | (155.8, 191.0)
  32  | (120.6, 231.0)  | (120.6, 191.0)
  33  | (85.4, 231.0)   | (85.4, 191.0)
  34  | (50.2, 231.0)   | (50.2, 191.0)
  35  | (15.0, 231.0)   | (15.0, 191.0)
Starting heater checks for heater_bed
Starting heater checks for extruder

Stats 29.9: gcodein=0  mcu: mcu_awake=0.000 mcu_task_avg=0.000000 mcu_task_stddev=0.000000 bytes_write=1451 bytes_read=4281 bytes_retransmit=9 bytes_invalid=0 send_seq=132 receive_seq=132 retransmit_seq=2 srtt=0.003 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72001289 host: mcu_awake=0.004 mcu_task_avg=0.000028 mcu_task_stddev=0.000016 bytes_write=812 bytes_read=4588 bytes_retransmit=0 bytes_invalid=0 send_seq=110 receive_seq=110 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49993014 adj=49983352  raspberry_pi: temp=31.6 mcu_temp: temp=22.7 heater_bed: target=0 temp=20.3 pwm=0.000 sysload=1.01 cputime=2.358 memavail=3487772 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=20.3 pwm=0.000
webhooks: registering remote method 'shutdown_machine' for connection id: 4131660920
webhooks: registering remote method 'reboot_machine' for connection id: 4131660920
webhooks: registering remote method 'pause_job_queue' for connection id: 4131660920
webhooks: registering remote method 'start_job_queue' for connection id: 4131660920
Stats 30.9: gcodein=0  mcu: mcu_awake=0.033 mcu_task_avg=0.000132 mcu_task_stddev=0.000444 bytes_write=5110 bytes_read=5015 bytes_retransmit=9 bytes_invalid=0 send_seq=214 receive_seq=211 retransmit_seq=2 srtt=0.004 rttvar=0.001 rto=0.025 ready_bytes=21 upcoming_bytes=65 freq=72001931 host: mcu_awake=0.004 mcu_task_avg=0.000028 mcu_task_stddev=0.000016 bytes_write=818 bytes_read=4604 bytes_retransmit=0 bytes_invalid=0 send_seq=111 receive_seq=111 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49996664 adj=49995781  raspberry_pi: temp=31.6 mcu_temp: temp=22.7 heater_bed: target=0 temp=20.1 pwm=0.000 sysload=1.41 cputime=2.622 memavail=3483976 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=20.4 pwm=0.000
Stats 31.9: gcodein=0  mcu: mcu_awake=0.033 mcu_task_avg=0.000132 mcu_task_stddev=0.000444 bytes_write=8376 bytes_read=5906 bytes_retransmit=9 bytes_invalid=0 send_seq=303 receive_seq=303 retransmit_seq=2 srtt=0.004 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72001335 host: mcu_awake=0.004 mcu_task_avg=0.000028 mcu_task_stddev=0.000016 bytes_write=824 bytes_read=4620 bytes_retransmit=0 bytes_invalid=0 send_seq=112 receive_seq=112 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49997572 adj=50000029  raspberry_pi: temp=32.1 mcu_temp: temp=22.6 heater_bed: target=0 temp=20.2 pwm=0.000 sysload=1.41 cputime=2.832 memavail=3484456 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=20.1 pwm=0.000
Stats 32.9: gcodein=0  mcu: mcu_awake=0.033 mcu_task_avg=0.000132 mcu_task_stddev=0.000444 bytes_write=11821 bytes_read=6622 bytes_retransmit=9 bytes_invalid=0 send_seq=388 receive_seq=385 retransmit_seq=2 srtt=0.005 rttvar=0.001 rto=0.025 ready_bytes=21 upcoming_bytes=86 freq=72001244 host: mcu_awake=0.004 mcu_task_avg=0.000028 mcu_task_stddev=0.000016 bytes_write=830 bytes_read=4636 bytes_retransmit=0 bytes_invalid=0 send_seq=113 receive_seq=113 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49998145 adj=50001323  raspberry_pi: temp=32.1 mcu_temp: temp=22.8 heater_bed: target=0 temp=20.2 pwm=0.000 sysload=1.41 cputime=3.030 memavail=3477128 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=20.3 pwm=0.000
Stats 34.0: gcodein=0  mcu: mcu_awake=0.033 mcu_task_avg=0.000132 mcu_task_stddev=0.000444 bytes_write=15074 bytes_read=7392 bytes_retransmit=9 bytes_invalid=0 send_seq=473 receive_seq=473 retransmit_seq=2 srtt=0.005 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72001319 host: mcu_awake=0.004 mcu_task_avg=0.000028 mcu_task_stddev=0.000016 bytes_write=836 bytes_read=4652 bytes_retransmit=0 bytes_invalid=0 send_seq=114 receive_seq=114 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49998593 adj=50001190  raspberry_pi: temp=32.6 mcu_temp: temp=22.9 heater_bed: target=0 temp=20.3 pwm=0.000 sysload=1.41 cputime=3.233 memavail=3482444 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=20.3 pwm=0.000
Stats 35.0: gcodein=0  mcu: mcu_awake=0.033 mcu_task_avg=0.000132 mcu_task_stddev=0.000444 bytes_write=18217 bytes_read=8187 bytes_retransmit=9 bytes_invalid=0 send_seq=557 receive_seq=557 retransmit_seq=2 srtt=0.005 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72000996 host: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000010 bytes_write=842 bytes_read=4681 bytes_retransmit=0 bytes_invalid=0 send_seq=115 receive_seq=115 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49998744 adj=50001133  raspberry_pi: temp=32.1 mcu_temp: temp=22.9 heater_bed: target=0 temp=20.1 pwm=0.000 sysload=1.41 cputime=3.412 memavail=3482448 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=20.4 pwm=0.000
Stats 36.0: gcodein=0  mcu: mcu_awake=0.206 mcu_task_avg=0.000379 mcu_task_stddev=0.000496 bytes_write=21615 bytes_read=8988 bytes_retransmit=9 bytes_invalid=0 send_seq=647 receive_seq=647 retransmit_seq=2 srtt=0.004 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72001006 host: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000010 bytes_write=848 bytes_read=4697 bytes_retransmit=0 bytes_invalid=0 send_seq=116 receive_seq=116 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49998925 adj=50001315  raspberry_pi: temp=32.1 mcu_temp: temp=22.9 heater_bed: target=0 temp=20.2 pwm=0.000 sysload=1.29 cputime=3.589 memavail=3482000 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=20.2 pwm=0.000
Stats 37.0: gcodein=0  mcu: mcu_awake=0.206 mcu_task_avg=0.000379 mcu_task_stddev=0.000496 bytes_write=25260 bytes_read=9889 bytes_retransmit=9 bytes_invalid=0 send_seq=747 receive_seq=747 retransmit_seq=2 srtt=0.005 rttvar=0.002 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72000979 host: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000010 bytes_write=854 bytes_read=4713 bytes_retransmit=0 bytes_invalid=0 send_seq=117 receive_seq=117 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999029 adj=50000988  raspberry_pi: temp=31.2 mcu_temp: temp=22.9 heater_bed: target=0 temp=20.3 pwm=0.000 sysload=1.29 cputime=3.776 memavail=3482004 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=20.3 pwm=0.000
Stats 38.0: gcodein=0  mcu: mcu_awake=0.206 mcu_task_avg=0.000379 mcu_task_stddev=0.000496 bytes_write=28578 bytes_read=10629 bytes_retransmit=9 bytes_invalid=0 send_seq=831 receive_seq=831 retransmit_seq=2 srtt=0.005 rttvar=0.001 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=72000872 host: mcu_awake=0.001 mcu_task_avg=0.000011 mcu_task_stddev=0.000010 bytes_write=860 bytes_read=4729 bytes_retransmit=0 bytes_invalid=0 send_seq=118 receive_seq=118 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 upcoming_bytes=0 freq=49999094 adj=50000675  raspberry_pi: temp=31.2 mcu_temp: temp=23.0 heater_bed: target=0 temp=20.2 pwm=0.000 sysload=1.29 cputime=3.952 memavail=3481332 print_time=0.000 buffer_time=0.000 print_stall=0 extruder: target=0 temp=20.4 pwm=0.000
